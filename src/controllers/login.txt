const loginUser = asyncHandler(async(req,res)=>{
    //req body ->data
    //username or email
    //find the user
    //password check
    //access or refresh token
    // send cookie

    const {email,username,password} =req.body
    if(!username && !email){
      throw new ApiError(400,"username or email is required");  
    }

    const user= await User.findOne({
      $or: [{username},{email}]
    })
    if(!user){
      throw new ApiError(400,"user does not exist")
    }
    const isPasswordValid=await user.isPasswordCorrect(password)

    if(!isPasswordValid){
      throw new ApiError(401,"password incorrrect")
    }

    const{ accessToken, refreshToken}= await generateAccessTokenAndRefereshToken(user._id)
    
    const loggedInUser=await User.findById(user._id).select("-password -refreshToken")
    
    const options= {
      httpOnly:true,
      secure:true
    }

    return res
    .status(200)
    .cookie("accessToken",accessToken,options)
    .cookie("refreshToken",refreshToken,options)
    .json(
      new ApiResponse(
        200,
        {
          user:loggedInUser, accessToken,refreshToken
        },
        "User logged in successfully"
      )
    ) 
})



// auth middleware
import { ApiError } from "../utils/apiError.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import jwt from "jsonwebtoken";
import { User } from "../models/user.model.js";

export const verifyJWT = asyncHandler(async (req, res, next) => {
  try {
    const token = req.cookies?.accessToken || req.header("Authorization")?.replace("Bearer ", "");

    // Log the token for debugging
    console.log("Token received:", token);

    if (!token) {
      throw new ApiError(401, "Unauthorized request: No token provided");
    }

    // Verify the token
    const decodedToken = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
    console.log("Decoded token:", decodedToken);

    // Find user based on the token
    const user = await User.findById(decodedToken?._id).select("-password -refreshToken");

    if (!user) {
      throw new ApiError(401, "Invalid access token: User not found");
    }

    req.user = user;
    next();
  } catch (error) {
    console.error('Token verification error:', error);
    throw new ApiError(401, error.message || "Error in access token");
  }
});
